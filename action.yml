name: 'Python Package GitHub Action'
description: 'Create Python distribution packages: source, wheel and Debian packages'
branding:
  icon: 'package'
  color: 'yellow'

inputs:
  package-version:
    description: 'Package version'
    required: false
    default: ''
  use-devcontainer:
    description: 'Build packages using devcontainer'
    required: false
    default: 'false'
  pre-build-command:
    description: 'Command to execute before packaging'
    required: false
  post-build-command:
    description: 'Command to execute after packaging'
    required: false
  add-source-dist:
    description: 'Should create source distribution?'
    required: false
    default: 'true'

  add-wheel-dist:
    description: 'Should create wheel distribution?'
    required: false
    default: 'true'
  debian-dist-type:
    description: 'Debian distribution type (fpm-deb / dh-virtualenv / none)'
    required: false
    default: 'none'
  debian-dist-command:
    description: 'Debian packaging custom command'
    required: false

  python-version:
    description: 'Python version'
    required: false
    default: '3.9'

  docker-registry:
    description: 'Docker registry'
    required: false
    default: 'docker.io'
  docker-username:
    description: 'Docker registry username'
    required: false
  docker-password:
    description: 'Docker registry password'
    required: false
  container-platform:
    description: 'Devcontainer platform (eg. linux/amd64,linux/arm64,linux/arm/v7)'
    required: false
    default: 'linux/amd64'
  container-config:
    description: 'Devcontainer config selector (eg. architecture, OS, etc.)'
    required: false
    default: '.'
  packaging-folder:
    description: 'Optional subfolder to run packaging command'
    required: false
    default: '.'

outputs:
  upload-name:
    description: 'Name of the uploaded artifacts'
    value: ${{ github.event.repository.name }}

runs:
  using: 'composite'
  steps:
    - name: Symlink current action repo
      env:
        action_path: ${{ github.action_path }}
      shell: bash
      run: |
        ln -fs ${{ env.action_path }} .github/actions

    - name: Set up environment
      id: set-env
      shell: bash
      run: |
        VERSION_REGEX="^[0-9]+\.[0-9]+\.[0-9]+$"
        if [[ "${{ inputs.package-version }}" =~ $VERSION_REGEX ]]; then
          echo "VERSION=${{ inputs.package-version }}" >> $GITHUB_ENV
        elif [[ "${GITHUB_REF#refs/tags/v}" =~ $VERSION_REGEX ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        else
          echo "Error: Invalid version"
          exit 1
        fi
    - name: Update version in setup.py
      shell: bash
      run: sed -i "s/version='.*',/version='$VERSION',/" setup.py

    - name: Install packaging tools
      shell: bash
      run: |
        git clone https://github.com/EffectiveRange/packaging-tools.git /tmp/packaging-tools
        sudo bash /tmp/packaging-tools/python/install.sh

    - if: ${{ inputs.pre-build-command }}
      name: Run pre-build command
      shell: bash
      run: ${{ inputs.pre-build-command }}

    - if: ${{ inputs.add-source-dist == 'true' }}
      name: Create source distribution
      shell: bash
      run: python setup.py sdist

    - if: ${{ inputs.use-devcontainer != 'true' }}
      name: Build native packages
      uses: ./.github/actions/native
      with:
        python-version: ${{ inputs.python-version }}
        add-wheel-dist: ${{ inputs.add-wheel-dist }}
        debian-dist-type: ${{ inputs.debian-dist-type }}
        debian-dist-command: ${{ inputs.debian-dist-command }}

    - if: ${{ inputs.use-devcontainer == 'true' }}
      name: Build packages using a devcontainer
      uses: ./.github/actions/devcontainer
      with:
        add-wheel-dist: ${{ inputs.add-wheel-dist }}
        debian-dist-type: ${{ inputs.debian-dist-type }}
        debian-dist-command: ${{ inputs.debian-dist-command }}
        docker-registry: ${{ inputs.docker-registry }}
        docker-username: ${{ inputs.docker-username }}
        docker-password: ${{ inputs.docker-password }}
        container-platform: ${{ inputs.container-platform }}
        container-config: ${{ inputs.container-config }}
        packaging-folder: ${{ inputs.packaging-folder }}

    - name: Unlink the action repository
      run: rm -f .github/actions
      shell: bash

    - if: ${{ inputs.post-build-command }}
      name: Run post-build command
      shell: bash
      run: ${{ inputs.post-build-command }}

    - name: Commit changes
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git diff --exit-code || git commit -am "Update version to $VERSION"
    - name: Push changes
      uses: ad-m/github-push-action@master
      if: ${{ !startsWith(github.ref, 'refs/pull/') && success() }}
      with:
        github_token: ${{ github.token }}
    - name: Publish distributions
      uses: actions/upload-artifact@v4
      if: ${{ !startsWith(github.ref, 'refs/pull/') }}
      with:
        name: ${{ github.event.repository.name }}
        path: dist/*
        if-no-files-found: error

name: 'Python devcontainer package action'
description: 'Create Python distribution packages with QEMU, Docker buildx in a devcontainer'
branding:
  icon: 'package'
  color: 'blue'

inputs:
  install-packaging-tools:
    description: 'Should install packaging tools?'
    required: false
    default: 'true'
  add-wheel-dist:
    description: 'Should create wheel distribution?'
    required: false
    default: 'true'
  debian-dist-type:
    description: 'Debian distribution type (fpm-deb / dh-virtualenv / none)'
    required: false
    default: 'none'
  debian-dist-command:
    description: 'Debian packaging custom command'
    required: false

  docker-registry:
    description: 'Docker registry'
    required: false
    default: 'docker.io'
  docker-username:
    description: 'Docker registry username'
    required: false
  docker-password:
    description: 'Docker registry password'
    required: false
  container-platform:
    description: 'Devcontainer platform (eg. linux/amd64,linux/arm64,linux/arm/v7)'
    required: false
    default: 'linux/amd64'
  container-config:
    description: 'Devcontainer config selector (eg. architecture, OS, etc.)'
    required: false
    default: '.'
  packaging-folder:
    description: 'Optional subfolder to run packaging command'
    required: false
    default: '.'

runs:
  using: 'composite'
  steps:
    - name: Free disk space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
    - name: Set up QEMU for multi-architecture builds
      uses: docker/setup-qemu-action@v3
    - name: Setup Docker buildx for multi-architecture builds
      uses: docker/setup-buildx-action@v3
    - name: Install skopeo
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y skopeo
    - if: ${{ inputs.docker-username && inputs.docker-password }}
      name: Log in to Docker registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.docker-registry }}
        username: ${{ inputs.docker-username }}
        password: ${{ inputs.docker-password }}
    - if: ${{ inputs.container-platform != 'linux/amd64' }}
      name: Pull image
      shell: bash
      run: |
        bash scripts/pull_image.sh .devcontainer/${{ inputs.container-config }}/devcontainer.json ${{ inputs.container-platform }}
    - name: Aggregate build commands
      shell: bash
      run: |
        command="ls -la"
        
        if [ "${{ inputs.install-packaging-tools }}" == "true" ]; then
          command="$command && git clone https://github.com/EffectiveRange/packaging-tools.git /tmp/packaging-tools"
          command="$command && bash /tmp/packaging-tools/python/install.sh"
        fi
        
        packaging=""
        
        if [ "${{ inputs.add-wheel-dist }}" == "true" ]; then
          packaging="$packaging wheel"
        fi
        
        if [ "${{ inputs.debian-dist-type }}" == "fpm-deb" ]; then
          packaging="$packaging fpm-deb"
        fi
        
        if [ "${{ inputs.debian-dist-type }}" == "dh-virtualenv" ]; then
          packaging="$packaging dh-virtualenv"
        fi
    
        if [ "$packaging" != "" ]; then
          command="$command && pack_python . -s \"$packaging\""
        fi
    
        if [ "${{ inputs.debian-dist-command }}" != "" ]; then
          command="$command && ${{ inputs.debian-dist-command }}"
        fi

        echo "Assembled command: $command"
        echo "COMMAND=$command" >> $GITHUB_ENV
    - name: Create distributions in devcontainer
      uses: devcontainers/ci@v0.3
      with:
        push: never
        platform: ${{ inputs.container-platform }}
        configFile: .devcontainer/${{ inputs.container-config }}/devcontainer.json
        subFolder: ${{ inputs.packaging-folder }}
        runCmd: eval ${{ env.COMMAND }}
